#!/usr/bin/env bash

# get base directory
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# define colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
normal=$(tput sgr0)

# Header logging
function p_header {
    printf "\n${blue}%s${normal}\n--------------------------------\n" "$@"
}

# Success logging
function p_success {
    printf "${green}âœ“ %s${normal}\n\n" "$@"
}

# Error logging
function p_error {
    printf "${red}x %s${normal}\n" "$@"
}

# Warning logging
function p_warning {
    printf "${yellow}! %s${normal}\n" "$@"
}

# Create symbolic link for dotfiles at home directory
# link_dotfile {source} {symlink}
function link_dotfile {
    p_header "Creating symlink to ${2} in ${HOME} directory..."

    if [ -f "${HOME}/${2}" ]; then
    # shellcheck disable=SC2088
    p_warning "${HOME}/${2} exists, backing it up to ${HOME}/${2}.backup"
    # force overwriting backup file
    mv -f "${HOME}/${2}" "${HOME}/${2}.backup"
    fi

    # Create the symlink.
    if ln -sf "${BASEDIR}/${1}" "${HOME}/${2}"; then
        p_success "Done"
        return 0
    else
        p_error "Failed to create symlink for ${1}"
        return 1
    fi
}


# ----------------------------------------------------------


# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if type -P "$1" > /dev/null; then
      return 0
    fi
    return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if brew list "$1" &> /dev/null; then
        return 0
    fi
    return 1
}

# Check whether the first argument is present in the 
# array which is the second argument
contains_element() {
    local element match=$1
    # shift the argument list by 1 to the left 
    # dropping the first argument
    shift
    # for without an in implicitly iterates over the
    # argument list
    for element; do
        if [[ "${element}" == "${match}" ]]; then
            return 0
        fi
    done
    return 1
}


# ----------------------------------------------------------


# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -rp "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# Test whether we're in a git repo
is_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
}